<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.igeek.zncq.mapper.ProduceConsumeMapper" >
  <resultMap id="BaseResultMap" type="com.igeek.zncq.entity.ProduceConsume" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="warehouse_id" property="warehouseId" jdbcType="INTEGER" />
    <result column="raw_num" property="rawNum" jdbcType="BIGINT" />
    <result column="raw_id" property="rawId" jdbcType="INTEGER" />
    <result column="raw_container_id" property="rawContainerId" jdbcType="INTEGER" />
    <result column="good_id" property="goodId" jdbcType="INTEGER" />
    <result column="good_num" property="goodNum" jdbcType="BIGINT" />
    <result column="good_container_id" property="goodContainerId" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, warehouse_id, raw_num, raw_id, raw_container_id, good_id, good_num, good_container_id, 
    create_date
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.igeek.zncq.entity.ProduceConsumeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from produce_consume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from produce_consume
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from produce_consume
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.igeek.zncq.entity.ProduceConsumeExample" >
    delete from produce_consume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.igeek.zncq.entity.ProduceConsume" >
    insert into produce_consume (id, warehouse_id, raw_num, 
      raw_id, raw_container_id, good_id, 
      good_num, good_container_id, create_date
      )
    values (#{id,jdbcType=INTEGER}, #{warehouseId,jdbcType=INTEGER}, #{rawNum,jdbcType=BIGINT}, 
      #{rawId,jdbcType=INTEGER}, #{rawContainerId,jdbcType=INTEGER}, #{goodId,jdbcType=INTEGER}, 
      #{goodNum,jdbcType=BIGINT}, #{goodContainerId,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.igeek.zncq.entity.ProduceConsume" >
    insert into produce_consume
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="warehouseId != null" >
        warehouse_id,
      </if>
      <if test="rawNum != null" >
        raw_num,
      </if>
      <if test="rawId != null" >
        raw_id,
      </if>
      <if test="rawContainerId != null" >
        raw_container_id,
      </if>
      <if test="goodId != null" >
        good_id,
      </if>
      <if test="goodNum != null" >
        good_num,
      </if>
      <if test="goodContainerId != null" >
        good_container_id,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="warehouseId != null" >
        #{warehouseId,jdbcType=INTEGER},
      </if>
      <if test="rawNum != null" >
        #{rawNum,jdbcType=BIGINT},
      </if>
      <if test="rawId != null" >
        #{rawId,jdbcType=INTEGER},
      </if>
      <if test="rawContainerId != null" >
        #{rawContainerId,jdbcType=INTEGER},
      </if>
      <if test="goodId != null" >
        #{goodId,jdbcType=INTEGER},
      </if>
      <if test="goodNum != null" >
        #{goodNum,jdbcType=BIGINT},
      </if>
      <if test="goodContainerId != null" >
        #{goodContainerId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.igeek.zncq.entity.ProduceConsumeExample" resultType="java.lang.Integer" >
    select count(*) from produce_consume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update produce_consume
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.warehouseId != null" >
        warehouse_id = #{record.warehouseId,jdbcType=INTEGER},
      </if>
      <if test="record.rawNum != null" >
        raw_num = #{record.rawNum,jdbcType=BIGINT},
      </if>
      <if test="record.rawId != null" >
        raw_id = #{record.rawId,jdbcType=INTEGER},
      </if>
      <if test="record.rawContainerId != null" >
        raw_container_id = #{record.rawContainerId,jdbcType=INTEGER},
      </if>
      <if test="record.goodId != null" >
        good_id = #{record.goodId,jdbcType=INTEGER},
      </if>
      <if test="record.goodNum != null" >
        good_num = #{record.goodNum,jdbcType=BIGINT},
      </if>
      <if test="record.goodContainerId != null" >
        good_container_id = #{record.goodContainerId,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update produce_consume
    set id = #{record.id,jdbcType=INTEGER},
      warehouse_id = #{record.warehouseId,jdbcType=INTEGER},
      raw_num = #{record.rawNum,jdbcType=BIGINT},
      raw_id = #{record.rawId,jdbcType=INTEGER},
      raw_container_id = #{record.rawContainerId,jdbcType=INTEGER},
      good_id = #{record.goodId,jdbcType=INTEGER},
      good_num = #{record.goodNum,jdbcType=BIGINT},
      good_container_id = #{record.goodContainerId,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.igeek.zncq.entity.ProduceConsume" >
    update produce_consume
    <set >
      <if test="warehouseId != null" >
        warehouse_id = #{warehouseId,jdbcType=INTEGER},
      </if>
      <if test="rawNum != null" >
        raw_num = #{rawNum,jdbcType=BIGINT},
      </if>
      <if test="rawId != null" >
        raw_id = #{rawId,jdbcType=INTEGER},
      </if>
      <if test="rawContainerId != null" >
        raw_container_id = #{rawContainerId,jdbcType=INTEGER},
      </if>
      <if test="goodId != null" >
        good_id = #{goodId,jdbcType=INTEGER},
      </if>
      <if test="goodNum != null" >
        good_num = #{goodNum,jdbcType=BIGINT},
      </if>
      <if test="goodContainerId != null" >
        good_container_id = #{goodContainerId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.igeek.zncq.entity.ProduceConsume" >
    update produce_consume
    set warehouse_id = #{warehouseId,jdbcType=INTEGER},
      raw_num = #{rawNum,jdbcType=BIGINT},
      raw_id = #{rawId,jdbcType=INTEGER},
      raw_container_id = #{rawContainerId,jdbcType=INTEGER},
      good_id = #{goodId,jdbcType=INTEGER},
      good_num = #{goodNum,jdbcType=BIGINT},
      good_container_id = #{goodContainerId,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>