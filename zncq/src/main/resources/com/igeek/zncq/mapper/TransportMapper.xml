<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.igeek.zncq.mapper.TransportMapper" >
  <resultMap id="BaseResultMap" type="com.igeek.zncq.entity.Transport" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="vehicle_id" property="vehicleId" jdbcType="INTEGER" />
    <result column="start_address" property="startAddress" jdbcType="VARCHAR" />
    <result column="mid_address" property="midAddress" jdbcType="VARCHAR" />
    <result column="end_address" property="endAddress" jdbcType="VARCHAR" />
    <result column="startDate" property="startdate" jdbcType="TIMESTAMP" />
    <result column="expected_endDate" property="expectedEnddate" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, vehicle_id, start_address, mid_address, end_address, startDate, expected_endDate,
    state
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.igeek.zncq.entity.TransportExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from transport
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from transport
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from transport
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.igeek.zncq.entity.TransportExample" >
    delete from transport
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.igeek.zncq.entity.Transport" >
    insert into transport (id, vehicle_id, start_address,
      mid_address, end_address, startDate,
      expected_endDate, state)
    values (#{id,jdbcType=INTEGER}, #{vehicleId,jdbcType=INTEGER}, #{startAddress,jdbcType=VARCHAR},
      #{midAddress,jdbcType=VARCHAR}, #{endAddress,jdbcType=VARCHAR}, #{startdate,jdbcType=TIMESTAMP},
      #{expectedEnddate,jdbcType=TIMESTAMP}, #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.igeek.zncq.entity.Transport" >
    insert into transport
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="vehicleId != null" >
        vehicle_id,
      </if>
      <if test="startAddress != null" >
        start_address,
      </if>
      <if test="midAddress != null" >
        mid_address,
      </if>
      <if test="endAddress != null" >
        end_address,
      </if>
      <if test="startdate != null" >
        startDate,
      </if>
      <if test="expectedEnddate != null" >
        expected_endDate,
      </if>
      <if test="state != null" >
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="vehicleId != null" >
        #{vehicleId,jdbcType=INTEGER},
      </if>
      <if test="startAddress != null" >
        #{startAddress,jdbcType=VARCHAR},
      </if>
      <if test="midAddress != null" >
        #{midAddress,jdbcType=VARCHAR},
      </if>
      <if test="endAddress != null" >
        #{endAddress,jdbcType=VARCHAR},
      </if>
      <if test="startdate != null" >
        #{startdate,jdbcType=TIMESTAMP},
      </if>
      <if test="expectedEnddate != null" >
        #{expectedEnddate,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.igeek.zncq.entity.TransportExample" resultType="java.lang.Integer" >
    select count(*) from transport
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
    <resultMap id="TransportVo" type="com.igeek.zncq.vo.TransportVo">
        <id property="id" column="tid"></id>
        <result property="startAddress" column="start_address"></result>
        <result property="midAddress" column="mid_address"></result>
        <result property="endAddress" column="end_address"></result>
        <result property="startdate" column="startDate"></result>
        <result property="expectedEnddate" column="expected_endDate"></result>
        <result property="state" column="tstate"></result>
        <association property="order" javaType="com.igeek.zncq.entity.Order">
            <result property="orderNo" column="order_no"></result>
            <result property="num" column="num"></result>
            <result property="total" column="total"></result>
        </association>
        <association property="vehicle" javaType="com.igeek.zncq.entity.Vehicle">
            <id property="id" column="id"></id>
            <result property="name" column="vname"></result>
            <result property="admin" column="admin"></result>
            <result property="phone" column="phone"></result>
            <result property="maxNum" column="max_num"></result>
            <result property="vehicleNo" column="vehicle_no"></result>
        </association>
    </resultMap>
    <select id="selectAllByGtState" resultMap="TransportVo">
      select distinct (o.order_no), o.Originator_name, o.customer_id, o.num, o.total, o.createDate, o.process_name, o.state, o.order_type,
                      v.id, name vname, v.admin, v.phone, v.max_num, v.vehicle_no,
                      t.id tid, t.start_address, t.mid_address, t.end_address, t.startDate, t.expected_endDate, t.state tstate
      from `order` o
             join order_good og on o.order_no = og.order_no
             join vehicle v on og.vehicle_id = v.id
             join transport t on v.id = t.vehicle_id
      where t.state >= #{state}
    </select>
  <select id="selectAllByGtStateQuery" resultMap="TransportVo">
    select distinct (o.order_no), o.Originator_name, o.customer_id, o.num, o.total, o.createDate, o.process_name, o.state, o.order_type,
                    v.id, name vname, v.admin, v.phone, v.max_num, v.vehicle_no,
                    t.id tid, t.start_address, t.mid_address, t.end_address, t.startDate, t.expected_endDate, t.state tstate
    from `order` o
           join order_good og on o.order_no = og.order_no
           join vehicle v on og.vehicle_id = v.id
           join transport t on v.id = t.vehicle_id
    where t.state >= #{queryVo.state}
        <if test="queryVo.orderNo != null and queryVo.orderNo != ''">
          and o.order_no like concat('%',#{queryVo.orderNo},'%')
        </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update transport
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.vehicleId != null" >
        vehicle_id = #{record.vehicleId,jdbcType=INTEGER},
      </if>
      <if test="record.startAddress != null" >
        start_address = #{record.startAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.midAddress != null" >
        mid_address = #{record.midAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.endAddress != null" >
        end_address = #{record.endAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.startdate != null" >
        startDate = #{record.startdate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expectedEnddate != null" >
        expected_endDate = #{record.expectedEnddate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update transport
    set id = #{record.id,jdbcType=INTEGER},
      vehicle_id = #{record.vehicleId,jdbcType=INTEGER},
      start_address = #{record.startAddress,jdbcType=VARCHAR},
      mid_address = #{record.midAddress,jdbcType=VARCHAR},
      end_address = #{record.endAddress,jdbcType=VARCHAR},
      startDate = #{record.startdate,jdbcType=TIMESTAMP},
      expected_endDate = #{record.expectedEnddate,jdbcType=TIMESTAMP},
      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.igeek.zncq.entity.Transport" >
    update transport
    <set >
      <if test="vehicleId != null" >
        vehicle_id = #{vehicleId,jdbcType=INTEGER},
      </if>
      <if test="startAddress != null" >
        start_address = #{startAddress,jdbcType=VARCHAR},
      </if>
      <if test="midAddress != null" >
        mid_address = #{midAddress,jdbcType=VARCHAR},
      </if>
      <if test="endAddress != null" >
        end_address = #{endAddress,jdbcType=VARCHAR},
      </if>
      <if test="startdate != null" >
        startDate = #{startdate,jdbcType=TIMESTAMP},
      </if>
      <if test="expectedEnddate != null" >
        expected_endDate = #{expectedEnddate,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.igeek.zncq.entity.Transport" >
    update transport
    set vehicle_id = #{vehicleId,jdbcType=INTEGER},
      start_address = #{startAddress,jdbcType=VARCHAR},
      mid_address = #{midAddress,jdbcType=VARCHAR},
      end_address = #{endAddress,jdbcType=VARCHAR},
      startDate = #{startdate,jdbcType=TIMESTAMP},
      expected_endDate = #{expectedEnddate,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>